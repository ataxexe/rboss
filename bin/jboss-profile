#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2011 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require_relative '../lib/rboss'
require 'optparse'
require 'yaml'
require 'logger'

params = {}
config = nil
create = true

opts = OptionParser::new
opts.on('-j', '--jboss-home PATH', 'Defines the JBOSS_HOME variable') do |home|
  params[:jboss_home] = home
end
opts.on('-t', '--type TYPE', 'Defines the JBoss Type (org, eap, soa_p, epp)') do |type|
  params[:type] = type.to_sym
end
opts.on('-n', '--version VERSION', 'Defines the JBoss version (5, 6, 5.1, ...)') do |version|
  params[:version] = version
end
opts.on('-b', '--base-profile PROFILE', 'Defines the base profile') do |profile|
  params[:base_profile] = profile
end
opts.on('-p', '--profile PROFILE', 'Defines the custom profile') do |profile|
  params[:profile] = profile
end
opts.on('-u', '--update', 'Just update the profile folder') do
  create = false
end
opts.on('-c', '--config-file FILE', 'Defines the configuration file for the instance') do |yaml|
  config_file = File.expand_path(yaml)
  config = YAML::load File.open(config_file)
  config.each do |c|
    if c.is_a? Hash and c[:params]
      c.delete(:params).each do |key, value|
        params[key] = value
      end
    end
  end
end
opts.on("--encrypt PASSWORD", "Encrypts the given password for using with a SecureIdentityLoginModule") do |password|
  params[:encrypt] = password
end
opts.on("--slim SERVICES", "--slimming SERVICES", Array, "Slim the desired JBoss profile") do |services|
  params[:slimming] = services
end
opts.on("--restore SERVICES", Array, "Restores slimmed services in the desired JBoss profile") do |services|
  params[:restore] = services
  create = false
end
opts.on("--this", "Defines the current dir as the profile folder and update mode") do
  params[:jboss_home] = File.dirname(File.dirname(Dir.pwd))
  params[:profile] = Dir.pwd.split('/')[-1]
  create = false
end
opts.on('-v', '--verbose', 'Displays shell commands') do
  include FileUtils::Verbose
  params[:log_level] = Logger::DEBUG
end
opts.on("-h", "--help", "Shows this help message") { puts opts; exit }
opts.parse!(ARGV) rescue abort 'Invalid Option! Use --help or -h for usage help.'

if params.empty?
  puts opts
  exit
end

params[:jboss_home] ||= Dir.pwd unless ENV["JBOSS_HOME"]
profile = JBoss::Profile::new params

if params[:slimming]
  profile.slim *params[:slimming]
end

if params[:restore]
  profile.add :restore, *params[:restore]
end

if params[:encrypt]
  puts "Encrypted password: " + profile.jboss.encrypt(params[:encrypt])
  exit
end

if config
  config.each do |var|
    if var.is_a? Hash
      var.each do |key, value|
        key = key.gsub(/-/, '_').to_sym if key.is_a? String
        profile.add key, value
      end
    else
      profile.add var.to_sym
    end
  end
end

profile.create if create
profile.update unless create
