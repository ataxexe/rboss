#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2011-2012 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require_relative '../lib/rboss'
require 'optparse'
require 'logger'
require 'yaml'
require 'fileutils'
require 'yummi'

include RBoss::Platform

params = {}
@conf_dir = File.expand_path "~/.rboss"
servers_file = "#@conf_dir/jboss-cli-servers.yaml"
@resources = {}
@parameters = {}
@servers_file = File.expand_path(servers_file)
save = false
params[:jboss_home] = (ENV["RBOSS_CLI_JBOSS_HOME"] or Dir.pwd)
params[:host] = '127.0.0.1'
params[:port] = '9999'

def load_yaml
  return Hash::new unless File.exist?(@servers_file)
  YAML::load_file(@servers_file)
end

opts = OptionParser::new
opts.on('-j', '--jboss-home PATH', 'Defines the JBOSS_HOME variable') do |home|
  params[:jboss_home] = home
end
opts.on('-s URL', 'Defines the JBoss server'.colorize(:green)) do |server|
  params[:server] = server
end
opts.on('--host HOST', 'Defines the JBoss host'.colorize(:green)) do |host|
  params[:host] = host
end
opts.on('--port PORT', 'Defines the JBoss admin port'.colorize(:green)) do |port|
  params[:port] = port
end
opts.on('-u', '--user USER', 'Defines the Admin User'.colorize(:green)) do |user|
  params[:user] = user
end
opts.on('-p', '--password PASSWORD', 'Defines the Admin Password'.colorize(:green)) do |password|
  params[:password] = password
end
opts.on('--jboss-cli', 'Starts the JBoss Management CLI') do 
  @start = true
end
opts.on('--save SERVER_NAME', "Saves the server configuration in #{servers_file}".colorize(:blue)) do |server|
  save = server
end
opts.on('-c', '--connect SERVER_NAME',
        "Uses a configured server in #{servers_file}".colorize(:blue)) do |server|
  config = load_yaml[server]
  abort "No configuration for #{server}" unless config
  config.each do |key, value|
    params[key.to_sym] = value
  end
end
opts.on('--loop INTERVAL', Float, 'Run inside a loop') do |interval|
  @loop = true
  @interval = interval
end

opts.on('--no-color', 'Do not colorize output') do
  require 'yummi/no_colors'
end
opts.on('-v', '--verbose', 'Displays jboss-cli commands before execution') do
  params[:log_level] = Logger::DEBUG
end

opts.on('-o', '--operation NAME',
        'Sets the operation to invoke (Defaults to "read-resource")'.colorize(:red)) do |name|
  @operation = name
end
opts.on('--skip-optional', 'Skips optional parameters while invoking a command '.colorize(:red)) do
  params[:skip_optional] = true
end
opts.on('-l', '--list-operations', 'Lists the available operations for a resource'.colorize(:red)) do
  @operation = 'read-operation-names'
end
opts.on('-d', '--detail-operation NAME', 'Shows the operation details'.colorize(:red)) do |operation_name|
  @operation = 'read-operation-description'
  @parameters = {'name' => operation_name}
end
opts.on('-a', '--args PARAMETERS', Array,
        'Specifies parameters in form of (name=value) for use with operation'.colorize(:red)) do |parameters|
  @parameters = Hash[(parameters.collect { |p| p.split( /=/, 2) })]
end

RBoss::Cli::Mappings.resource_mappings.each do |name, config|
  if config[:description]
    if config[:scan]
      opts.on("--#{name} [NAMES]", Array, config[:description].colorize(:yellow)) do |resources|
        @resources[name] = resources
      end
    else
      opts.on("--#{name}", config[:description].colorize(:yellow)) do
        @resources[name] = true
      end
    end
  end
end

opts.on('--all', 'Display all available info'.colorize(:bold_white)) do
  RBoss::Cli::Mappings.resource_mappings.each do |name, config|
    @resources[name] = nil unless config[:derived]
  end
end

opts.on("-h", "--help", "Shows this help message") do
  puts opts; exit
end
opts.parse!(ARGV) rescue abort 'Invalid Option! Use --help or -h for usage help.'

@jboss_home = params[:jboss_home]
@jboss_cli = RBoss::Cli::Invoker::new params

if save
  config = load_yaml
  config[save] ||= {}
  server_config = config[save]
  params.delete :jboss_home
  params.each do |key, value|
    server_config[key.to_s] = value
  end
  FileUtils::mkdir_p File.expand_path(@conf_dir)
  FileUtils::touch @servers_file
  f = File.open(@servers_file, 'w')
  YAML::dump(config, f)
  f.close
  puts "Configuration saved!"
  exit 0
end

if @start
  system jboss_cli
  exit 0
end

if @resources.empty? and not @operation
  puts opts
elsif @resources.empty?
  @resources[''] = true
elsif not @operation
  @operation = :read_resource
end

def execute_actions
  begin
    content = @jboss_cli.invoke(@operation, @resources, @parameters)
    system clear if @loop
    puts Yummi.colorize(Time.now.strftime("At %H:%M:%S%n"), :white) if @loop
    puts content.chomp
  rescue RBoss::Cli::InvocationFailed => e
    puts Yummi::colorize e.message, :intense_red
  end
end

begin

  while @loop
    execute_actions
    sleep @interval
  end

  execute_actions

rescue Interrupt
  puts "Aborted!".colorize(:red)
end