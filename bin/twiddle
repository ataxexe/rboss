#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2011 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'rboss'
require 'optparse'
require 'yaml'

params = {}
mbeans = {}
commands = {}
no_details = false
params[:jboss_home] = Dir.pwd unless ENV["JBOSS_HOME"]
exec_file = nil
defaults = JBoss::Twiddle::Monitor::defaults

opts = OptionParser::new
opts.on('-j', '--jboss-home PATH', 'Defines the JBOSS_HOME variable') do |home|
  params[:jboss_home] = home
end
opts.on('-s', '--jboss-server URL', 'Defines the JBoss server') do |server|
  params[:jboss_server] = server
end
opts.on('--jboss-host HOST', 'Defines the JBoss host') do |host|
  params[:jboss_host] = host
end
opts.on('--jboss-port PORT', 'Defines the JBoss jnp port') do |port|
  params[:jboss_port] = port
end
opts.on('-e', '--exec-file PATH',
        'Defines the ruby file to exec using the vars twiddle and monitor') do |path|
  exec_file = File.expand_path path
end

defaults.each do |mbean_id, mbean|
  command = mbean_id.to_s.gsub /_/, '-'
  if mbean[:scan]
    opts.on("--#{command} [resource_a,resource_b,...]", Array, mbean[:description]) do |names|
      mbeans[mbean_id] = names || :all
    end
  elsif mbean[:detail]
    opts.on("--#{command}", mbean[:description]) do
      mbeans[mbean_id] = true
    end
  end
end

opts.on('--set mbean_id[:resource_name],property,value', Array,
        'Sets a value to a resource that the monitor knows') do |set|
  commands[:set] = set
end
opts.on('--get mbean_id[:resource_name],property', Array,
        'Gets a value to a resource that the monitor knows') do |get|
  commands[:get] = get
end
opts.on('--invoke mbean_id[:resource_name],method,[,args...]', Array,
        'Invokes a resoruce method') do |invoke|
  commands[:invoke] = invoke
end
#opts.on('--no-detail', 'Do not detail mbeans') do
#  no_details = true
#end
opts.on('-u', '--jmx-user USER', 'Defines the JMX User') do |user|
  params[:jmx_user] = user
end
opts.on('-p', '--jmx-password PASSWORD', 'Defines the JMX Password') do |password|
  params[:jmx_password] = password
end
opts.on("-h", "--help", "Shows this help message") do
  puts opts; exit
end
opts.parse!(ARGV) rescue abort 'Invalid Option! Use --help or -h for usage help.'

twiddle = JBoss::Twiddle::Invoker::new params
monitor = twiddle.monitor

if mbeans.empty? and commands.empty? and not exec_file
  puts opts
  exit
end

eval File.read(exec_file), binding, exec_file if exec_file

def extract resource
  mbean, name = resource.split(/:/)
end

if commands[:set]
  array = commands[:set]
  raise "Wrong number of arguments" if array.size != 3
  mbean, name = extract array[0]
  puts twiddle.set :mbean => mbean.to_sym,
                   :name => name,
                   :property => array[1],
                   :value => array[2]
end
if commands[:get]
  array = commands[:get]
  raise "Wrong number of arguments" if array.size != 2
  mbean, name = extract array[0]
  puts twiddle.get :mbean => mbean.to_sym,
                   :name => name,
                   :property => array[1]
end
if commands[:invoke]
  array = commands[:invoke]
  raise "Wrong number of arguments" if array.size < 2
  mbean, name = extract array[0]
  puts twiddle.invoke :mbean => mbean.to_sym,
                      :name => name,
                      :method => array[1],
                      :args => array[2..-1]
end

mbeans.each do |mbean_id, resources|
  if resources.is_a? TrueClass
    details = monitor.mbean(mbean_id).detail
    details.each do |name, value|
      puts "  - #{name}=#{value}"
    end
  else
    details = monitor.mbean(mbean_id).detail resources
    details.each do |resource, detail|
      puts "  - #{resource}"
      detail.each do |name, value|
        puts "    - #{name}=#{value}"
      end
    end
  end
end

