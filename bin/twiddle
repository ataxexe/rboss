#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2011 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require_relative '../lib/rboss'
require 'optparse'
require 'logger'
require 'yaml'
require 'fileutils'
require 'yummi'

params = {}
@mbeans = {}
@commands = {}
no_details = false
@conf_dir = File.expand_path "~/.rboss"
servers_file = "#{@conf_dir}/twiddle.yaml"
@servers_file = File.expand_path(servers_file)
save = false
params[:jboss_home] = (ENV["JBOSS_HOME"] or ENV["TWIDDLE_HOME"] or Dir.pwd)

defaults = JBoss::Twiddle::Monitor::defaults

def load_yaml
  return Hash::new unless File.exist?(@servers_file)
  YAML::load_file(@servers_file)
end

opts = OptionParser::new
opts.on('-j', '--jboss-home PATH', 'Defines the JBOSS_HOME variable') do |home|
  params[:jboss_home] = home
end
opts.on('-s URL', 'Defines the JBoss server') do |server|
  params[:server] = server
end
opts.on('--host HOST', 'Defines the JBoss host') do |host|
  params[:host] = host
end
opts.on('--port PORT', 'Defines the JBoss jnp port') do |port|
  params[:port] = port
end
opts.on('-c', '--connect SERVER_NAME',
        "Uses a configured server in #{servers_file}") do |server|
  config = load_yaml[server]
  abort "No configuration for #{server}" unless config
  config.each do |key, value|
    params[key.to_sym] = value
  end
end
opts.on('--save SERVER_NAME', "Saves the server configuration in #{servers_file}") do |server|
  save = server
end
opts.on('--loop INTERVAL', Float, 'Runs the mbean inside a loop') do |interval|
  @loop = true
  @interval = interval
end
opts.on('--all', "Detail all mapped mbeans") do
  defaults.each do |mbean_id, mbean|
    if mbean[:scan]
      @mbeans[mbean_id] = :all
    elsif mbean[:properties]
      @mbeans[mbean_id] = true
    end
  end
end

(defaults.sort_by { |k, v| k }).each do |mbean_id, mbean|
  next if mbean[:properties] and not mbean[:scan] and mbean[:pattern]['#{resource}']
  command = mbean_id.to_s.gsub /_/, '-'
  if mbean[:scan]
    opts.on("--#{command} [name_a,name_b,...]", Array,
            "Detail \"#{mbean[:description]}\" based on the given names (no names for scan)") do |names|
      @mbeans[mbean_id] = names || :all
    end
  elsif mbean[:properties]
    opts.on("--#{command}", "Detail \"#{mbean[:description]}\"") do
      @mbeans[mbean_id] = true
    end
  end
end

opts.on('--set mbean_id[:resource_name],property,value', Array,
        'Sets a value to a resource that the monitor knows') do |set|
  @commands[:set] = set
end
opts.on('--get mbean_id[:resource_name],property', Array,
        'Gets a value to a resource that the monitor knows') do |get|
  @commands[:get] = get
end
opts.on('--query mbean_id[:resource_name],[arguments]', Array,
        'Queries the mbean') do |query|
  @commands[:query] = query
end
opts.on('--info mbean_id[:resource_name],[arguments]', Array,
        'List mbean info') do |info|
  @commands[:info] = info
end
opts.on('--invoke mbean_id[:resource_name],method,[,args...]', Array,
        'Invokes a resoruce method') do |invoke|
  @commands[:invoke] = invoke
end
opts.on("-l", "--list", "List the mbeans mappings") do
  (defaults.sort_by { |k, v| k }).each do |mbean_id, mbean|
    puts " - #{mbean_id.to_s.gsub(/_/, '-')}"
    [:description, :pattern].each do |detail|
      puts "   - #{detail} : #{mbean[detail]}"
    end
    puts
  end
  exit
end
opts.on('--no-detail', 'Do not detail mbeans that needs a name') do
  no_details = true
end
opts.on('--no-color', 'Do not colorize output') do
  require 'yummi/no_colors'
end
opts.on('-u', '--user USER', 'Defines the JMX User') do |user|
  params[:user] = user
end
opts.on('-p', '--password PASSWORD', 'Defines the JMX Password') do |password|
  params[:password] = password
end
opts.on('-n COMMAND', '--native COMMAND', 'Executes the given command as is') do |command|
  @commands[:native] = command
end
opts.on('-v', '--verbose', 'Shows the twiddle commands before execution') do
  params[:log_level] = Logger::DEBUG
end
opts.on("-h", "--help", "Shows this help message") do
  puts opts; exit
end
opts.parse!(ARGV) #rescue abort 'Invalid Option! Use --help or -h for usage help.'

@twiddle = JBoss::Twiddle::Invoker::new params

if save
  config = load_yaml
  config[save] ||= {}
  server_config = config[save]
  params.delete :jboss_home
  params.each do |key, value|
    server_config[key.to_s] = value
  end
  FileUtils::mkdir_p File.expand_path(@conf_dir)
  FileUtils::touch @servers_file
  f = File.open(@servers_file, 'w')
  YAML::dump(config, f)
  f.close
  puts "Configuration saved!"
end

def extract resource
  mbean, name = resource.split(/:/)
  mbean.gsub! /-/, '_'
  [mbean, name]
end

puts opts if @mbeans.empty? and @commands.empty?

@actions = JBoss::CommandActions::Twiddle::new @twiddle,
  :no_details => no_details,
  :mbeans => defaults

def execute_actions
  buff = ""
  buff << Yummi.colorize(Time.now.strftime("At %H:%M:%S%n"), :white) if @loop
  buff << @actions.parse_and_execute(@commands)
  buff << @actions.detail(@mbeans)
  system "clear" if @loop
  puts buff
end

while @loop
  execute_actions
  sleep @interval
end

execute_actions
