#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2011 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'rboss'
require 'optparse'
require 'yaml'

params = {}
resources = {}
list_only = false
params[:jboss_home] = Dir.pwd unless ENV["JBOSS_HOME"]
exec_file = nil

opts = OptionParser::new
opts.on('-j', '--jboss-home PATH', 'Defines the JBOSS_HOME variable') do |home|
  params[:jboss_home] = home
end
opts.on('-s', '--jboss-server URL', 'Defines the JBoss server') { |server| params[:jboss_server] = server }
opts.on('--jboss-host HOST', 'Defines the JBoss host') { |host| params[:jboss_host] = host }
opts.on('--jboss-port PORT', 'Defines the JBoss jnp port') { |port| params[:jboss_port] = port }
opts.on('-e', '--exec-file PATH', 'Defines the ruby file to exec using the vars twiddle and monitor') do |path|
  exec_file = File.expand_path path
end
opts.on('--show-all', 'Shows all resources available') do
  [:server_info, :deployments, :datasources, :webapps, :connectors, :queues, :ejbs].each do |option|
    resources[option] = :all
  end
end
opts.on('--server-info', 'Shows server information') { resources[:server_info] = true }
opts.on('--deployments', 'Shows deployments on server') { resources[:deployments] = true }
opts.on('--connectors [name_a, name_b, name_c, ...]', Array, 'Defines the connectors to show or scan if not specified') do |connectors|
  resources[:connectors] = connectors || :all
end
opts.on('--datasources [name_a, name_b, name_c, ...]', Array, 'Defines the datasources to show or scan if not specified') do |datasources|
  resources[:datasources] = datasources || :all
end
opts.on('--ejbs [name_a, name_b, name_c, ...]', Array, 'Defines the EJBs to show or scan if not specified') do |ejbs|
  resources[:ejbs] = ejbs || :all
end
opts.on('--queues [name_a, name_b, name_c, ...]', Array, 'Defines the JMS queues to show or scan if not specified') do |queues|
  resources[:queues] = queues || :all
end
opts.on('--webapps [name_a, name_b, name_c, ...]', Array, 'Defines the webapps to show or scan if not specified') do |webapps|
  resources[:webapps] = webapps || :all
end
opts.on('--list', 'Only lists the required info (datasources, queues, ...)') { list_only = true }
opts.on('-u', '--jmx-user USER', 'Defines the JMX User') { |user| params[:jmx_user] = user }
opts.on('-p', '--jmx-password PASSWORD', 'Defines the JMX Password') { |password| params[:jmx_password] = password }
opts.on("-h", "--help", "Shows this help message") { puts opts; exit }
opts.parse!(ARGV) rescue abort 'Invalid Option! Use --help or -h for usage help.'

twiddle = JBoss::Twiddle::Invoker::new params
monitor = twiddle.monitor

if resources.empty? and not exec_file
  puts opts
  exit
end

if resources.empty?
  eval File.read(exec_file), binding, exec_file
else
  if resources[:server_info]
    puts "Server Info:"
    monitor.properties[:server].each do |property|
      puts "  - #{monitor.server[property]}"
    end
    monitor.properties[:server_info].each do |property|
      puts "  - #{monitor.server_info[property]}"
    end
  end
  if resources[:deployments]
    puts "Deployments:"
    monitor.deployments.each do |deployment|
      puts "  - #{deployment}"
    end
  end
  if resources[:connectors]
    puts "Connectors:"
    connectors = resources[:connectors]
    connectors = monitor.connectors if connectors == :all
    connectors.each do |connector|
      monitor.with connector do
        puts "  - #{connector}"
        unless list_only
          monitor.properties[:connector].each do |property|
            puts "    - #{monitor.connector[property]}"
          end
          monitor.properties[:request].each do |property|
            puts "    - #{monitor.request[property]}"
          end
        end
      end
    end
  end
  if resources[:datasources]
    puts "Datasources:"
    datasources = resources[:datasources]
    datasources = monitor.datasources if datasources == :all
    datasources.each do |datasource|
      monitor.with datasource do
        puts "  - #{datasource}"
        unless list_only
          monitor.properties[:datasource].each do |property|
            puts "    - #{monitor.datasource[property]}"
          end
        end
      end
    end
  end
  if resources[:webapps]
    puts "Webapps:"
    webapps = resources[:webapps]
    webapps = monitor.webapps if webapps == :all
    webapps.each do |webapp|
      monitor.with webapp do
        puts "  - #{webapp}"
        unless list_only
          monitor.properties[:webapp].each do |property|
            puts "    - #{monitor.webapp[property]}"
          end
        end
      end
    end
  end
  if resources[:ejbs]
    puts "EJBs:"
    ejbs = resources[:ejbs]
    ejbs = monitor.ejbs if ejbs == :all
    ejbs.each do |ejb|
      monitor.with ejb do
        puts "  - #{ejb}"
        unless list_only
          monitor.properties[:ejb].each do |property|
            puts "    - #{monitor.ejb[property]}"
          end
        end
      end
    end
  end
  if resources[:queues]
    puts "Queues:"
    queues = resources[:queues]
    queues = monitor.queues if queues == :all
    queues.each do |queue|
      monitor.with queue do
        puts "  - #{queue}"
        unless list_only
          monitor.properties[:queue].each do |property|
            puts "    - #{monitor.queue[property]}"
          end
        end
      end
    end
  end
end
